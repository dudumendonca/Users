// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserInfra.Contexts;

namespace UserInfra.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200605163225_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("UserDomain.Entities.AddressType", b =>
                {
                    b.Property<int>("AddressTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AddressTypeName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("AddressTypeId");

                    b.ToTable("AddressType");
                });

            modelBuilder.Entity("UserDomain.Entities.ContactType", b =>
                {
                    b.Property<int>("ContactTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ContactTypeName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ContactTypeId");

                    b.ToTable("ContactType");
                });

            modelBuilder.Entity("UserDomain.Entities.EmailType", b =>
                {
                    b.Property<int>("EmailTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("EmailTypeName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("EmailTypeId");

                    b.ToTable("EmailType");
                });

            modelBuilder.Entity("UserDomain.Entities.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("CargoId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UserBirthDate")
                        .HasColumnType("Date");

                    b.Property<string>("UserCpf")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("UserDeletedDate")
                        .HasColumnType("Date");

                    b.Property<long?>("UserDeletedUser")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UserFirstLoginDate")
                        .HasColumnType("Date");

                    b.Property<string>("UserGender")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.Property<string>("UserMainEmail")
                        .IsRequired()
                        .HasColumnType("varchar(254)")
                        .IsUnicode(true);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UserPassword")
                        .HasColumnType("varchar(20)");

                    b.Property<int>("UserStatusId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("UserStatusId")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("UserDomain.Entities.UserAddress", b =>
                {
                    b.Property<long>("UserAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AddressTypeId")
                        .HasColumnType("bigint");

                    b.Property<int?>("AddressTypeId1")
                        .HasColumnType("int");

                    b.Property<string>("UserCity")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserComplement")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("UserCountry")
                        .HasColumnType("varchar(50)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserNeighborhood")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserState")
                        .HasColumnType("char(2)");

                    b.Property<string>("UserStreetName")
                        .HasColumnType("varchar(150)");

                    b.Property<int>("UserStreetNumber")
                        .HasColumnType("int(4)");

                    b.Property<int>("UserZipCode")
                        .HasColumnType("int(11)");

                    b.HasKey("UserAddressId");

                    b.HasIndex("AddressTypeId1");

                    b.HasIndex("UserId");

                    b.ToTable("UserAddress");
                });

            modelBuilder.Entity("UserDomain.Entities.UserContact", b =>
                {
                    b.Property<long>("UserContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("ContactTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserCountryRegion")
                        .HasColumnType("int");

                    b.Property<int>("UserDDD")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("UserPhoneNumber")
                        .HasColumnType("int");

                    b.HasKey("UserContactId");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserContact");
                });

            modelBuilder.Entity("UserDomain.Entities.UserEmail", b =>
                {
                    b.Property<int>("UserEmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EmailTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId1")
                        .HasColumnType("bigint");

                    b.Property<string>("UserMail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserEmailId");

                    b.HasIndex("EmailTypeId");

                    b.HasIndex("UserId1");

                    b.ToTable("UserEmail");
                });

            modelBuilder.Entity("UserDomain.Entities.UserStatus", b =>
                {
                    b.Property<int>("UserStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("UserStatusName")
                        .HasColumnType("int");

                    b.HasKey("UserStatusId");

                    b.ToTable("UserStatus");
                });

            modelBuilder.Entity("UserDomain.Entities.User", b =>
                {
                    b.HasOne("UserDomain.Entities.UserStatus", "UserStatus")
                        .WithOne("User")
                        .HasForeignKey("UserDomain.Entities.User", "UserStatusId")
                        .IsRequired();
                });

            modelBuilder.Entity("UserDomain.Entities.UserAddress", b =>
                {
                    b.HasOne("UserDomain.Entities.AddressType", "AddressType")
                        .WithMany()
                        .HasForeignKey("AddressTypeId1");

                    b.HasOne("UserDomain.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("UserDomain.Entities.UserContact", b =>
                {
                    b.HasOne("UserDomain.Entities.ContactType", "ContactType")
                        .WithMany()
                        .HasForeignKey("ContactTypeId")
                        .IsRequired();

                    b.HasOne("UserDomain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("UserDomain.Entities.UserEmail", b =>
                {
                    b.HasOne("UserDomain.Entities.EmailType", "EmailType")
                        .WithMany()
                        .HasForeignKey("EmailTypeId")
                        .IsRequired();

                    b.HasOne("UserDomain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");
                });
#pragma warning restore 612, 618
        }
    }
}
